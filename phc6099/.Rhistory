knitr::opts_chunk$set(echo = TRUE)
options(stringsAsFactors = FALSE) ## prevent read in string data to factors.
fnc <- function(i){(2^i/i^2)+(3^i/i^3)+(4^i/i^4)}
sum(fnc(1:14))
library(dplyr)
set.seed(32611) ## set random seed
avec <- sample(1:100, 100, replace = T)
bvec <- sample(1:100, 100, replace = T)
avecData <- as.data.frame(table(avec))
bvecData <- as.data.frame(table(bvec))
## finding the values with frequencies >=5 for avec and >=3 for bvec
a <- filter(avecData, Freq >= 5)
b <- filter(bvecData, Freq >= 3)
## outputting the result
a
b
## The union of (a) and (b) consists of the values of bvec with frequency >= 3 because there are no values of avec with frequency >= 5:
union(a$avec,b$bvec)
set.seed(32611) ## set random seed
avec <- sample(1:100, 100, replace = T)
bvec <- sample(1:100, 100, replace = T)
##specify the value of the threshold
threshavec <- 70
##establish the logic
log_avec <- avec >= threshavec
##find indexes
index_avec <- which(log_avec)
index_avec
##same process for bvec
threshbvec <- 75
log_bvec <- bvec >= threshbvec
index_bvec <- which(log_bvec)
index_bvec
## Intersection of the two vectors:
intersect(index_avec,index_bvec)
##remove spaces from the state names
state1 <- gsub(" ","",state.name)
##determine the maximum character length of the states
max(nchar(state1))
##sort by character length and locate index of states with largest number of characters
stateChars <- nchar(state1)
sort(stateChars, decreasing=TRUE, index.return = TRUE)
##we find index value 21,33,40
stateMAX <- state1[c(21,33,40)]
##split the strings
stateSplit1 <- strsplit(stateMAX, NULL)[[1]]
stateSplit2 <- strsplit(stateMAX, NULL)[[2]]
stateSplit3 <- strsplit(stateMAX, NULL)[[3]]
rev1 <- rev(stateSplit1)
rev2 <- rev(stateSplit2)
rev3 <- rev(stateSplit3)
paste(rev1, collapse="")
paste(rev2, collapse="")
paste(rev3, collapse="")
fnc1 <- function(x) {
if (abs(x)<=1) {
(x^2)}
else {
(2*abs(x)-1)
}
}
fnc1(0) + fnc1(1) + fnc1(2)
fnc2 <- function(x,a) {
if (abs(x)<=a){
return((x^2))
}
else {
return((2*a*abs(x)-a^2))
}
}
fnc2(1, 0) + fnc2(1, 1) + fnc2(1, 2)
fncv <- function(x, a){
ifelse(
abs(x)<=a, x^2, 2*a*abs(x)-a^2
)
}
mean(fncv(x=1:10, a=3)) - mean(fncv(x=1:10, a=2))
fncv <- function(x, a){
stopifnot(!missing(x), !missing(a), a>=0, !numeric(x), !numeric(a))
ifelse(
abs(x)<=a, x^2, 2*a*abs(x)-a^2
)
}
fncv <- function(x, a){
tryCatch({
stopifnot(!missing(x), !missing(a), a>=0, !numeric(x), !numeric(a))
ifelse(abs(x)<=a, x^2, 2*a*abs(x)-a^2)
}, error = function(e) -1
)
}
fncv(1:5, a = -1)
fncv()
fncv(x="1")
tcgaData <- read.csv("https://caleb-huo.github.io/teaching/data/BreastCancer/brca_tcga.csv", row.names = 1)
dim(tcgaData)
## There are 200 rows and 40 columns.
## Your code
genes <- row.names(tcgaData)
ARgenes <- grep("A|R", genes, ignore.case = TRUE, value = TRUE)
ARgenes
sampleVec <- colnames(tcgaData)
sampleString <- substring(sampleVec, 14, 15)
tumor <- which(sampleString == "01")
normal <- which(sampleString == "11")
print(tumor)
print(normal)
geneVariance <- numeric(length=200)
for(i in 1:200){
geneVariance[i] <- var(as.matrix(tcgaData)[i,])
}
geneVarSort <- sort(geneVariance, decreasing = TRUE)
varNamed <- data.frame(geneVariance, rownames(tcgaData))
arrange(varNamed, desc(geneVariance), .by_group = TRUE) %>% slice(1:40)
pvalfunc <- function(row){
ttest <- t.test(row)
return(ttest$p.value)
}
pvals <- apply(tcgaData, 1, pvalfunc)
which.min(pvals)
which.min(pvals[-123])
## The gene with the smallest p-value is MLANA, and the gene with the second smallest p-value is CPN1.
qvals <- p.adjust(pvals, method = "BH")
length(which(qvals < 0.05))
